# -*- coding: utf-8 -*-
"""CollatzFinalized.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_UYK8ltrsFcHjkygpH_PgnIZ3ShqcsqU
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns

collatz_cache = {}

# cache collatz sequences to optimize performance
def optimized_sequencerHelpy(start):
    if start in collatz_cache:
        return collatz_cache[start]

    path = [start]
    original_start = start
    while start != 1:
        if start in collatz_cache:
            path.extend(collatz_cache[start][1:])
            break
        if start % 2 == 0:
            start //= 2
        else:
            start = start * 3 + 1
        path.append(start)

    collatz_cache[original_start] = path
    return path

# basic collatz function without cache
def sequencerHelpy(start):
    path = [start]
    while start != 1:
        if start % 2 == 0:
            start //= 2
        else:
            start = start * 3 + 1
        path.append(start)
    return path

# calculate collatz sequence lengths for numbers 1 to 10000
def compute_collatz_lengths():
    collatz_lengths = {i: len(sequencerHelpy(i)) for i in range(1, 10001)}
    return collatz_lengths

# plot collatz sequence lengths for all numbers
def plot_sequence_lengths(collatz_lengths):
    plt.figure(figsize=(10, 6))
    plt.plot(list(collatz_lengths.keys()), list(collatz_lengths.values()), color='blue')
    plt.title('Collatz Sequence Lengths for Integers from 1 to 10,000')
    plt.xlabel('Starting Integer')
    plt.ylabel('Sequence Length')
    plt.grid(True)
    plt.show()

# plot the sequences of interesting numbers (longest, mid, shortest)
def plot_specific_sequences(collatz_lengths):

    max_length_num = max(collatz_lengths, key=collatz_lengths.get)
    mid_length_num = sorted(collatz_lengths.items(), key=lambda x: x[1])[len(collatz_lengths) // 2][0]
    min_length_num = min(collatz_lengths, key=collatz_lengths.get)

    max_sequence = sequencerHelpy(max_length_num)
    mid_sequence = sequencerHelpy(mid_length_num)
    min_sequence = sequencerHelpy(min_length_num)

    plt.figure(figsize=(12, 8))
    plt.plot(max_sequence, label=f'Longest Sequence (Start: {max_length_num})')
    plt.plot(mid_sequence, label=f'Mid-range Sequence (Start: {mid_length_num})')
    plt.plot(min_sequence, label=f'Shortest Sequence (Start: {min_length_num})')
    plt.title('Visualizing Specific Collatz Sequences')
    plt.xlabel('Step')
    plt.ylabel('Value')
    plt.legend()
    plt.grid(True)
    plt.show()

# create a dataframe for collatz data
def create_collatz_dataframe():
    numbers = []
    sequence_lengths = []
    final_halfway_points = []
    max_values = []
    mean_values = []

    # loop through first 10000 numbers
    for i in range(1, 10001):
        seq = sequencerHelpy(i)
        numbers.append(i)
        sequence_lengths.append(len(seq))
        final_halfway_points.append(seq[len(seq) // 2])
        max_values.append(max(seq))
        mean_values.append(np.mean(seq))

    # create pandas dataframe
    df = pd.DataFrame({
        'Number': numbers,
        'Sequence Length': sequence_lengths,
        'Final Halfway Point': final_halfway_points,
        'Max Value in Sequence': max_values,
        'Mean Value in Sequence': mean_values
    })

    return df

# create extended dataframe for collatz data up to 20000 numbers
def create_extended_collatz_dataframe():
    numbers = []
    sequence_lengths = []
    final_halfway_points = []
    max_values = []
    mean_values = []
    even_steps = []
    odd_steps = []

    for i in range(1, 20001):
        seq = optimized_sequencerHelpy(i)
        numbers.append(i)
        sequence_lengths.append(len(seq))
        final_halfway_points.append(seq[len(seq) // 2])
        max_values.append(max(seq))
        mean_values.append(np.mean(seq))
        even_steps.append(sum(1 for num in seq if num % 2 == 0))
        odd_steps.append(sum(1 for num in seq if num % 2 != 0))

    # create pandas dataframe with additional columns
    df = pd.DataFrame({
        'Number': numbers,
        'Sequence Length': sequence_lengths,
        'Final Halfway Point': final_halfway_points,
        'Max Value in Sequence': max_values,
        'Mean Value in Sequence': mean_values,
        'Even Steps': even_steps,
        'Odd Steps': odd_steps
    })

    return df

# main function to run collatz sequence and plotting
def collatz():
    collatz_lengths = compute_collatz_lengths()

    plot_sequence_lengths(collatz_lengths)

    plot_specific_sequences(collatz_lengths)

    collatz_df = create_collatz_dataframe()
    print(collatz_df.head())

collatz()

# create extended collatz dataframe and save it
extended_collatz_df = create_extended_collatz_dataframe()

extended_collatz_df.to_csv('collatz_extended_dataset.csv', index=False)

print(extended_collatz_df.head())

# compute correlation matrix and print
correlation_matrix = extended_collatz_df.corr()
print(correlation_matrix)

# plot heatmap for the correlation matrix
def plot_correlation_matrix(correlation_matrix):
    plt.figure(figsize=(10, 8))
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
    plt.title('Correlation Matrix of Collatz Extended Data')
    plt.show()

plot_correlation_matrix(correlation_matrix)